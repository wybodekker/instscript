#!/bin/bash

Version=1.10
Myname="${0##*/}"

:<<'DOC'
= instscript - install a script and its gendoc documentation

= Synopsis
instscript [options] scriptname 	

== Options
-h,--help	print short help and exit
-H,--Help	print full documentation via less and exit
-V,--version	print version and exit
-d,--debug	set debug flag: keep intermediate files for inspection
-e,--extras=X	set list of extra files to be zipped to X (comma separated)
-z,--zip	create zip file for CTAN

= Description
instscript installs a (bash, ruby, perl, ...) script, for which
the documentation is maintained in the gendoc format.
The environment variable |PREFIX| tells where things are
installed:

The script is installed in |$PREFIX/bin|. Its documentation
is extracted and placed in |$PREFIX/html| (for the html
documentation), in |$PREFIX/pdf| for the PDF documentation
and in |$PREFIX/man/man1| (for the man page). |instscript|
must be executed in the script's source directory.

The script must have valid gendoc documentation - see
[github](github.com/wybodekker/gendoc) The first
paragraph that is found under the |= Description| header is
saved in a |README.md| file, which should be part of the
source: it is used by github. Bars (|) will be stripped
from that paragraph.

With the |--zip| option, a zip file containing the script,
a README file, a man page, and html and pdf documents is created.

= Author
[Wybo Dekker](wybodekker@me.com)

= Copyright
Released under the [GNU General Public License](www.gnu.org/copyleft/gpl.html)
DOC

Red='' Nor=''
[ -t 1 ] && command -v tput >/dev/null && (( $(tput colors) >= 8 )) && { 
  Red=$(tput bold && tput setaf 1) 
  Nor=$(tput sgr0)
} 
    die() { local i; for i; do echo -e "$Myname: $Red$i$Nor"; done >&2; exit 1; } 
helpsrt() { sed -n '/^= Synopsis/,/^= /p' "$0"|sed '1d;$d'; exit 0; } 
helpall() { sed -n "/^:<<'DOC'$/,/^DOC/p" "$0"|sed '1d;$d'| 
            less -P"$Myname-${Version/./Â·} (press h for help, q to quit)";exit 0; }

:<<'DOC' #----------------------------------------------------------------------
= handle_options
synopsis:	 handle_options "$@"
description:	handle the options.
globals used:	 Myname Version
globals  set:	 args zip
DOC
#-------------------------------------------------------------------------------
handle_options() {
   if ! options=$(getopt \
      -n "$Myname" \
      -o hHVzde:I \
      -l help,Help,version,zip,debug,extras: -- "$@"
   ); then exit 1; fi
   eval set -- "$options"
   zip=false
   while [ $# -gt 0 ]; do
      case $1 in
      (-h|--help)     # print short help and exit
   	   helpsrt
   	   ;;
      (-H|--Help)     # print full documentation via less and exit
   	   helpall
   	   ;;
      (-V|--version)  # print version and exit
   	   echo $Version
   	   exit
   	   ;;
      (-e|--extras)   # set list of extra files to be zipped to X (space separated)
   	   extras="$2"
   	   shift 2
   	   ;;
      (-z|--zip)      # create zip file for CTAN
   	   zip=true
   	   shift
   	   ;;
      (-I) $0 "$0" || die "the -I option is for developers only"
   	   exit
   	   ;;
      (--) shift
   	   break
   	   ;;
      (*)  break
   	   ;;
      esac
   done
   args=( "$@" )
}

[[ -n $PREFIX ]] || die "The environment variable PREFIX is undefined"
[[ -d $PREFIX ]] || die "The environment variable PREFIX does not point to a directory"

handle_options "$@"
set -- "${args[@]}"
(( $# == 1 )) || die "I need 1 input file"

curdir=$(pwd)
curdir=${curdir##*/}
scriptname=${1##*/}
[[ -n $scriptname ]] ||
   die "I need the name of a script in the current directory"
[[ -e $scriptname ]] ||
   die "./$scriptname: not found"
[[ $scriptname == "$curdir" ]] ||
   die "script must live directory with the same name"

# use scriptinfo to gather information from the script:
scriptversion='' short='' type=''
for i in short type scriptversion intro changes; do
   read -r ${i?}
done < <(scriptinfo --brief "$scriptname")

# is all info there?
[[ -n $scriptversion ]] || die "$scriptname has no version"
[[ -n $short ]]         || die "found no line starting with: = $scriptname - ..."
[[ -n $type ]]          || die "Could not find type of $scriptname in shebang line"

# be sure that the script is executable:
chmod a+x "$scriptname"

# install the script in $PREFIX/bin:
cp -af "$scriptname" "$PREFIX/bin"

# generate the documentation:
gendoc "$PREFIX/bin/$scriptname" || exit 1

# generate the README.md file
scriptinfo -m "$scriptname" >README.md

# if a zip is required, generate it:
if $zip; then
   cp -f "$PREFIX/pdf/$scriptname.pdf" .
   cp -f "$PREFIX/html/$scriptname.html" .
   cp -f "$PREFIX/man/man1/$scriptname.1" .
   cd ..
   zipname="$scriptname/$scriptname-$scriptversion.zip"
   zip -Dq "$zipname" "$scriptname"/"$scriptname"
   [[ -z $extras ]] || eval "zip -Drq $zipname $extras"
   zip -Dmq "$zipname" "$scriptname/$scriptname".{pdf,html,1} "$scriptname"/README.md
fi
