#!/bin/bash

Version=1.08
Myname="${0##*/}"

:<<'DOC'
= instscript - install a script and its gendoc documentation

= Synopsis
instscript [options] scriptname 	

== Options
-h|--help	print short help and exit
-H|--Help	print full documentation via less and exit
-V|--version	print version and exit
-d|--debug	set debug flag: keep intermediate files for inspection
-e|--extras	comma separated list of extra files to be zipped
-z|--zip	create zip file for CTAN

= Description
instscript installs a (bash, ruby, perl, ...) script, which
is maintained using the git source code management system.
The environment variable |PREFIX| tells where things are
installed:

The script is installed in |$PREFIX/bin|. Its documentation
is extracted and placed in |$PREFIX/html| (for the html
documentation), in |$PREFIX/pdf| for the PDF documentation
and in |$PREFIX/man/man1| (for the man page). |instscript|
must be executed in the script's mercurial directory.

The script must have valid gendoc documentation - see
[github](https://github.com/wybodekker/gendoc) The first
paragraph that is found under the |= Description| header is
saved in a |README.md| file, which should be part of the
source: it is used by github. Bars (|) will be stripped
from that paragraph.

With the |--zip| option, a zip file containing the script
and a README file is created.

= Author
[Wybo Dekker](wybo@dekkerdocumenten.nl)

= Copyright
Released under the [GNU General Public License](www.gnu.org/copyleft/gpl.html)
DOC

REd='\e[38;5;9m'
    die() { local i; for i; do echo -e "$Myname: $REd$i"; done 1>&2; exit 1; }
helpsrt() { sed -n '/^= Synopsis/,/^= /p' "$0"|sed '1d;$d'; exit; }
helpall() { sed -n "/^:<<'DOC'$/,/^DOC/p" "$0"|sed '1d;$d'|
            less -P"$Myname-${Version/./Â·} (press h for help, q to quit)";exit; }

:<<'DOC' #----------------------------------------------------------------------
= handle_options
synopsis:	 handle_options "$@"
description:	handle the options.
globals used:	 Myname Version
globals  set:	 args zip gendocopt
DOC
#-------------------------------------------------------------------------------
handle_options() {
   if ! options=$(getopt \
      -n "$Myname" \
      -o hHVzde:I \
      -l help,Help,version,zip,debug,extras: -- "$@"
   ); then exit 1; fi
   eval set -- "$options"
   zip=false gendocopt='' 
   while [ $# -gt 0 ]; do
      case $1 in
      (-h|--help)     # print short help and exit
   	   helpsrt
   	   ;;
      (-H|--Help)     # print full documentation via less and exit
   	   helpall
   	   ;;
      (-V|--version)  # print version and exit
   	   echo $Version
   	   exit
   	   ;;
      (-d|--debug)    # set debug flag: keep intermediate files for inspection
   	   gendocopt=-d
   	   shift
   	   ;;
      (-e|--extras)   # comma separated list of extra files to be zipped
   	   extras=",$2"
   	   shift 2
   	   ;;
      (-z|--zip)      # create zip file for CTAN
   	   zip=true
   	   shift
   	   ;;
      (-I) $0 "$0" || die "the -I option is for developers only"
   	   exit
   	   ;;
      (--) shift
   	   break
   	   ;;
      (*)  break
   	   ;;
      esac
   done
   args=( "$@" )
}

[[ -n $PREFIX ]] || die "The environment variable PREFIX is undefined"
[[ -d $PREFIX ]] || die "The environment variable PREFIX does not point to a directory"

handle_options "$@"
set -- "${args[@]}"

test $# -eq 1 || die "I need 1 input file"

curdir=$(pwd)
curdir=${curdir##*/}
scriptname=${1##*/}
[[ -n $scriptname ]] ||
   die "I need the name of a script in the current directory"
[[ -e $scriptname ]] ||
   die "./$scriptname: not found"
[[ $scriptname == "$curdir" ]] ||
   die "script must live directory with the same name"

# use scriptinfo to gather information from the script:
scriptversion='' short='' type=''
for i in short type scriptversion intro changes; do
   read -r ${i?}
done < <(scriptinfo --brief "$scriptname")

# is all info there?
[[ -n $scriptversion ]] || die "$scriptname has no version"
[[ -n $short ]]         || die "found no line starting with: = $scriptname - ..."
[[ -n $type ]]          || die "Could not find type of $scriptname in shebang line"

# be sure that the script is executable:
chmod 755 "$scriptname"

# install the script in $PREFIX/bin:
cp -a "$scriptname" "$PREFIX/bin"

# generate the documentation:
gendoc $gendocopt "$scriptname" || exit 1

# generate the README.md file
scriptinfo -m "$scriptname" >README.md

# if a zip is required, generate it:
if $zip; then
   cd ..
   eval "zip -Drq $scriptname/$scriptname-$scriptversion.zip \
                  $scriptname/{README.md,$scriptname,$scriptname.pdf$extras}"
fi
